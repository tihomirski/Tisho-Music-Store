<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:webflow-config="http://www.springframework.org/schema/webflow-config"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/webflow-config http://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd">

    <!-- defines the connection to the H2 database, i.e. the data source -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.h2.Driver" />
        <property name="url" value="jdbc:h2:~/test" />
        <property name="username" value="sa"/>
        <property name="password" value="" />
    </bean>

    <!-- one sessionFactory for one DB -->
    <!-- sessionFactory contains all the Hibernate mapping information and
        is responsible for the creation and maintenance of the Hibernate session in transactions. -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>

        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
                <!-- hbm2ddl.auto validates or exports the ddl schema to database when sessionFactory is created.
                     4 types of values:
                     validate - only validates the schema. not creating anything,
                     update - updates the schema. it it doesnt exist, create it,
                     create-drop - creates a schema at begin of session and drops it at the end
                     create - creates a schema at begin of session
                -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!-- The SQL command will be printed in the console -->
                <prop key="hibernate.show_sql">true</prop>
                <!-- The output of the SQL will be formatted -->
                <prop key="hibernate.format_sql">true</prop>
            </props>
        </property>
        
        <property name="packagesToScan">
            <list>
                <value>com.tisho.music.store</value>
            </list>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="1024000"/>
    </bean>

    <!-- Security config for the http part -->
    <!-- attr changed. Was default-target-url="/admin/" -->
    <!-- default-target-url="/product/productList/" is the one common page we can show to both roles of users.-->
    <security:http auto-config="true">
        <security:intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
        <security:intercept-url pattern="/customer/**" access="ROLE_USER" />
        <security:form-login
                login-page="/login"
                default-target-url="/product/productList/all"
                authentication-failure-url="/login?error"
                username-parameter="username"
                password-parameter="password" />
        <security:logout
            logout-success-url="/login?logout" />


    </security:http>

    <!-- we use db to check on it -->
    <!-- The dataSource is defined in the beginning of this XML -->
    <!-- This way the security knows where to retrieve the info for username and passwords -->
    <security:authentication-manager>
        <security:authentication-provider>
            <security:jdbc-user-service data-source-ref="dataSource"
                                        authorities-by-username-query="SELECT username, authority FROM authorities WHERE username = ?"
                                        users-by-username-query="SELECT username, password, enabled FROM users WHERE username = ?" />
        </security:authentication-provider>
    </security:authentication-manager>


    <!-- Web Flow config -->
    <webflow-config:flow-executor id="flowExecutor" flow-registry="flowRegistry" />

    <!-- Base path is where we store our flow documents. -->
    <webflow-config:flow-registry id="flowRegistry" base-path="/WEB-INF/flows">
        <webflow-config:flow-location path="/checkout/checkout-flow.xml" id="checkout" />
    </webflow-config:flow-registry>

    <bean id="flowHandlerMapping" class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
        <property name="flowRegistry" ref="flowRegistry" />
    </bean>

    <bean id="flowHandlerAdapter" class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
        <property name="flowExecutor" ref="flowExecutor" />
    </bean>
</beans>